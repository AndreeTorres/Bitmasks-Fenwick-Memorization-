// Contar cantidad de bits activos
while(S>0){
    if(S&1){
        cont++:
    }
    S=S>>1;
}
// Buscar el MSB
// En este caso la computadora interpresta hasta el MSB y no cuenta los 0 anteriores
// entonces la cantidad de bits será la posición del MSB

while(S>0){
    cont++:
    S= S>>1;
}
// Contar bits
while(S>0){
    cont++;
    S = S>>1; 
}



// 1. Verificar si un bit esta activo
//        S & (1<<k) adonde k es la posicion a verificar
// 2. Encender un bit
//        S | (1<<k)
// 3. Apagar el ultimo 1 (apagar el LSB)
//        S & (S-1)
// 4. LSB
//        S&(-S)
// 5. Hacer swap de bits
//        S=  S^(1<<k)
// 6. Apagar un bit 
//        S= S& ~(1<<k)
// 7. Modulo de S
//        S&(N-1)
// 


// RightShift : Dividir entre 2
// S>>k
// Ejemplo: S= 0001000 -> 8
// La manera más sencilla de ver right shift es que va desplazando todos los bits las posiciones que se indique
// S>>2
// Numero original = 0001000
// Desplazamos una vez todos los bits a la derecha 0000100 -> 4
// Desplazamos una vez todos los bits a la derecha 0000010 -> 2
// Practicamente es agregar un cero y desplazar los bits n cantidades de veces


// LeftShift : Multiplicar por 2
// S<<k
// Ejemplo: S= 0001000 -> 8
// LeftShift es lo contrario, ya que se busca desplazar los bits a la izquierda entonces se van a mover todos los bits a la izq n veces
// Otra forma de verlo es que se va a agregar un cero a la derecha y los demas bits se van a "desbordar"
// S<<2
// Numero original = 0001000
// Desplazamos una vez todos los bits a la izquierda 0010000 -> 16
// Desplazamos una vez todos los bits a la izquierda 0100000 -> 32
